[
	{
    "id": "1",
		"title": "Longest Common Prefix",
		"description": "<div><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string <code>\"\"</code>.</p><p>&nbsp;</p> <p><strong>Example 1:</strong></p><pre><strong>Input:</strong> strs = [\"flower\",\"flow\",\"flight\"] <strong>Output:</strong> \"fl\" </pre><p><strong>Example 2:</strong></p><pre><strong>Input:</strong> strs = [\"dog\",\"racecar\",\"car\"] <strong>Output:</strong> \"\" <strong>Explanation:</strong> There is no common prefix among the input strings. </pre><p>&nbsp;</p> <p><strong>Constraints:</strong></p><ul> <li><code>1 &lt;= strs.length &lt;= 200</code></li> <li><code>0 &lt;= strs[i].length &lt;= 200</code></li> <li><code>strs[i]</code> consists of only lowercase English letters.</li> </ul> </div>",
		"testCases": [
			{ "input": "[\"flower\",\"flow\",\"flight\"]", "output": "fl" },
			{
				"input": "[\"dog\",\"racecar\",\"car\"]",
				"output": ""
			}
		]
	},
	{
    "id": "2",
		"title": "Climbing Stairs",
		"description": "<div><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p> <p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> n = 2 <strong>Output:</strong> 2 <strong>Explanation:</strong> There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps </pre> <p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> n = 3 <strong>Output:</strong> 3 <strong>Explanation:</strong> There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li><code>1 &lt;= n &lt;= 45</code></li> </ul> </div>",
		"testCases": [
			{ "input": "2", "output": "2" },
			{
				"input": "3",
				"output": "3"
			}
		]
	},
  {
    "id": "3",
		"title": "Add Binary",
		"description": "<div><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p> <p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> n = 2 <strong>Output:</strong> 2 <strong>Explanation:</strong> There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps </pre> <p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> n = 3 <strong>Output:</strong> 3 <strong>Explanation:</strong> There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li><code>1 &lt;= n &lt;= 45</code></li> </ul> </div>",
		"testCases": [
			{ "input": "11\n1", "output": "100" },
			{
				"input": "1010\n1011",
				"output": "10101"
			}
		]
	},
  {
    "id": "4",
		"title": "Majority Element",
		"description": "<div><p>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.</p> <p>The majority element is the element that appears more than <code>⌊n / 2⌋</code> times. You may assume that the majority element always exists in the array.</p> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> nums = [3,2,3] <strong>Output:</strong> 3 </pre><p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> nums = [2,2,1,1,1,2,2] <strong>Output:</strong> 2 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li><li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li></ul><p>&nbsp;</p> <strong>Follow-up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?</div>",
		"testCases": [
			{ "input": "[3,2,3]", "output": "3" },
			{
				"input": "[2,2,1,1,1,2,2]",
				"output": "2"
			}
		]
	},
  {
    "id": "5",
		"title": "Palindrome Number",
		"description": "<div><p>Given an integer <code>x</code>, return <code>true</code><em> if </em><code>x</code><em> is a </em><span><div><div><div><div><em><strong>palindrome</strong></em></div></div><div></div></div></div></span><em>, and </em><code>false</code><em> otherwise</em>.</p> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> x = 121 <strong>Output:</strong> true <strong>Explanation:</strong> 121 reads as 121 from left to right and from right to left. </pre> <p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> x = -121 <strong>Output:</strong> false <strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome. </pre> <p><strong>Example 3:</strong></p> <pre><strong>Input:</strong> x = 10 <strong>Output:</strong> false <strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li> </ul> <p>&nbsp;</p> <strong>Follow up:</strong> Could you solve it without converting the integer to a string?</div>",
		"testCases": [
			{ "input": "121", "output": "true" },
			{
				"input": "-121",
				"output": "false"
			}
		]
	},
  {
    "id": "6",
		"title": "Reverse Bits",
		"description": "<div><p>Reverse bits of a given 32 bits unsigned integer.</p> <p><strong>Note:</strong></p> <ul> <li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</li><li>In Java, the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">2's complement notation</a>. Therefore, in <strong>Example 2</strong> above, the input represents the signed integer <code>-3</code> and the output represents the signed integer <code>-1073741825</code>.</li> </ul> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> n = 00000010100101000001111010011100 <strong>Output:</strong>    964176192 (00111001011110000010100101000000) <strong>Explanation: </strong>The input binary string <strong>00000010100101000001111010011100</strong> represents the unsigned integer 43261596, so return 964176192 which its binary representation is <strong>00111001011110000010100101000000</strong>. </pre> <p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> n = 11111111111111111111111111111101 <strong>Output:</strong>   3221225471 (10111111111111111111111111111111) <strong>Explanation: </strong>The input binary string <strong>11111111111111111111111111111101</strong> represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is <strong>10111111111111111111111111111111</strong>. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li>The input must be a <strong>binary string</strong> of length <code>32</code></li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> If this function is called many times, how would you optimize it?</p> </div>",
		"testCases": [
			{ "input": "00000010100101000001111010011100", "output": "964176192 (00111001011110000010100101000000)" },
			{
				"input": "11111111111111111111111111111101",
				"output": "3221225471 (10111111111111111111111111111111)"
			}
		]
	},
  {
    "id": "7",
		"title": "Excel Sheet Column Title",
		"description": "<div><p>Given an integer <code>columnNumber</code>, return <em>its corresponding column title as it appears in an Excel sheet</em>.</p> <p>For example:</p> <pre>A -&gt; 1 B -&gt; 2 C -&gt; 3 ... Z -&gt; 26 AA -&gt; 27 AB -&gt; 28  ... </pre> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> columnNumber = 1 <strong>Output:</strong> \"A\" </pre> <p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> columnNumber = 28 <strong>Output:</strong> \"AB\" </pre> <p><strong>Example 3:</strong></p> <pre><strong>Input:</strong> columnNumber = 701 <strong>Output:</strong> \"ZY\" </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li><code>1 &lt;= columnNumber &lt;= 2<sup>31</sup> - 1</code></li> </ul> </div>",
		"testCases": [
			{ "input": "1", "output": "A" },
			{
				"input": "28",
				"output": "AB"
			},
      {
				"input": "701",
				"output": "ZY"
			},
      {
				"input": "234",
				"output": "HZ"
			},
      {
				"input": "564",
				"output": "UR"
			}
		]
	},
  {
    "id": "8",
		"title": "Sqrt(x)",
		"description": "<div><p>Given a non-negative integer <code>x</code>, return <em>the square root of </em><code>x</code><em> rounded down to the nearest integer</em>. The returned integer should be <strong>non-negative</strong> as well.</p> <p>You <strong>must not use</strong> any built-in exponent function or operator.</p> <ul><li>For example, do not use <code>pow(x, 0.5)</code> in c++ or <code>x ** 0.5</code> in python.</li> </ul> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> x = 4 <strong>Output:</strong> 2 <strong>Explanation:</strong> The square root of 4 is 2, so we return 2. </pre> <p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> x = 8 <strong>Output:</strong> 2 <strong>Explanation:</strong> The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li> </ul> </div>",
		"testCases": [
			{ "input": "1", "output": "1" },
			{
				"input": "144",
				"output": "12"
			},
      {
				"input": "630",
				"output": "25"
			},
      {
				"input": "10",
				"output": "3"
			},
      {
				"input": "100",
				"output": "10"
			}
		]
	},
  {
    "id": "8",
		"title": "Sqrt(x)",
		"description": "<div><p>Given a non-negative integer <code>x</code>, return <em>the square root of </em><code>x</code><em> rounded down to the nearest integer</em>. The returned integer should be <strong>non-negative</strong> as well.</p> <p>You <strong>must not use</strong> any built-in exponent function or operator.</p> <ul><li>For example, do not use <code>pow(x, 0.5)</code> in c++ or <code>x ** 0.5</code> in python.</li> </ul> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> x = 4 <strong>Output:</strong> 2 <strong>Explanation:</strong> The square root of 4 is 2, so we return 2. </pre> <p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> x = 8 <strong>Output:</strong> 2 <strong>Explanation:</strong> The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li> </ul> </div>",
		"testCases": [
			{ "input": "1", "output": "1" },
			{
				"input": "144",
				"output": "12"
			},
      {
				"input": "630",
				"output": "25"
			},
      {
				"input": "10",
				"output": "3"
			},
      {
				"input": "100",
				"output": "10"
			}
		]
	},
  {
    "id": "9",
		"title": "Happy Number",
		"description": "<div><p>Write an algorithm to determine if a number <code>n</code> is happy.</p> <p>A <strong>happy number</strong> is a number defined by the following process:</p> <ul><li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li><li>Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.</li><li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li></ul> <p>Return <code>true</code> <em>if</em> <code>n</code> <em>is a happy number, and</em> <code>false</code> <em>if not</em>.</p> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> n = 19 <strong>Output:</strong> true <strong>Explanation:</strong> 1<sup>2</sup> + 9<sup>2</sup> = 82 8<sup>2</sup> + 2<sup>2</sup> = 68 6<sup>2</sup> + 8<sup>2</sup> = 100 1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1 </pre> <p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> n = 2 <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul> </div>",
		"testCases": [
			{ "input": "19", "output": "true" },
			{
				"input": "2",
				"output": "false"
			},
      {
				"input": "101",
				"output": "false"
			},
      {
				"input": "256",
				"output": "false"
			},
      {
				"input": "400",
				"output": "false"
			}
		]
	},
  {
    "id": "10",
		"title": "Third Maximum Number",
		"description": "<div><p>Given an integer array <code>nums</code>, return <em>the <strong>third distinct maximum</strong> number in this array. If the third maximum does not exist, return the <strong>maximum</strong> number</em>.</p> <p>&nbsp;</p> <p><strong>Example 1:</strong></p> <pre><strong>Input:</strong> nums = [3,2,1] <strong>Output:</strong> 1 <strong>Explanation:</strong> The first distinct maximum is 3. The second distinct maximum is 2. The third distinct maximum is 1. </pre> <p><strong>Example 2:</strong></p> <pre><strong>Input:</strong> nums = [1,2] <strong>Output:</strong> 2 <strong>Explanation:</strong> The first distinct maximum is 2. The second distinct maximum is 1. The third distinct maximum does not exist, so the maximum (2) is returned instead. </pre> <p><strong>Example 3:</strong></p> <pre><strong>Input:</strong> nums = [2,2,3,1] <strong>Output:</strong> 1 <strong>Explanation:</strong> The first distinct maximum is 3. The second distinct maximum is 2 (both 2's are counted together since they have the same value). The third distinct maximum is 1. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul><li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> </ul><p>&nbsp;</p> <strong>Follow up:</strong> Can you find an <code>O(n)</code> solution?</div>",
		"testCases": [
			{ "input": "[3,2,1]", "output": "1" },
      {
				"input": "[1,2]",
				"output": "1"
			},
      {
				"input": "[2,2,3,1]",
				"output": "false"
			},
      {
				"input": "[2,3,1,6]",
				"output": "2"
			},
      {
				"input": "[0, 0, 0]",
				"output": "0"
			}
		]
	}
]
